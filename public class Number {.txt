public class Number {

	public static void main(String[] args) {
		
		int a=656,b=20,c=34;
		Number.swap(a,b);
		Number.largestOfThree(a,b,c);
		System.out.println("welcome to number world");
		
	       
	       /*
	          NUMBER TEMPLATE for               |    NUMBER TEMPLATE for
	             prime | pronic | perfect      |     spy or special |  niven or harshad 
	              Abundaunt | deficient         |    duck number | neon numbers | krishna moorthy | Automorphic             
	         for(int i= 1;i<=n;i++) {            |     int m=n;
	        	 if (n%i==0) {                   |      while(n!=0){
					// logic                     |        int d=n%10;
				}                                |       // logic //
	         }                                   |       n=n/10;
	                                             |       }
	        if (check) {                         |        if (check) { 
				System.out.println();            |              System.out.println();
			}else                                |         }else
				System.out.println();            |               System.out.println(); 
		      
	       
	       
	       /* 
	        * 
	          Amstrong | fibonidires | odd even 
	          paliindrome or reverse | swap | largest 
	       
	         1 spy or special  num means sum & product shoud be eqaul
	            for ex  123 ---> 1+2+3 = 6 & 1*2*3 = 6
	       
	      2  niven or harshad sum of the num is divisible remainder o
	          for 156  ---> 1+5+6 = 12 --->156%12==0
	       
	        3  duck number the shoudl conatin 0
	          for ex  408,350 ---> its a duck number
	       
	        4  neon number the square of the num is equal to the actucl num 
	          9 ---> 9*9 = 81 ---> 81 ---> 8+1= 9 
	       
	       5 Automorphic number the number whichb is contained in the last didgit of its square number
	            for ex 25 ---> 25*25  = 625 ---> last digit 6'25' = 25
	       
	       6  krishna moorthy number sum of fact is eual to the org num 
	           for ex 145 ---> 1!+4!+5!= 145 
	   8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
	          find the factor of given number 
	       
	       7 prime number the number whish is divisiblr by 1 & itself 
	        1,2,3,5,7,9,11,13,17,19 ---> prime numbers
	       
	       8 composite number is nothog but non prime number
	        for ex 4,8,10,12,14,15,16,
	       
	       
	      9  perfect number or not a number which is equal to sum of its divisors or except itself 
	         for ex 6 ---> 1+2+3= 6 
	       
	      10  Abundant number mezns a number WHICH IS su m of its factor is greater than itself 
	        for ex 12 ---> 1,2,3,4,5,6 = 16 ---> 16 > 12 
	       
	     11    deficient  number mezns a number WHICH IS su m of its factor is  lesser  than itself 
	        for ex 12 ---> 1,3,7 = 11 ---> 11 < 21 
	        
	        */
	
	
	 }
	public static  void  swap(int x,int y) {
		
		System.out.println("A is "+ x+ " B is "+ y);
		 x=x-y;
		 y=y+x;
		 x=y-x;
		System.out.println("A is "+ x+ " B is "+ y);
		
	}
	
	public static  void  largestOfThree(int x,int y,int z) {
		
	//in res=(z> (x>y)?x:y   )? : ;
				System.out.println(res);
	}     
	
	public static  void isOddOrEven(int x) {
		
	}
	
	public static  void  isAmstrong(int x) {
		
		
	}
	
	public static  void  isFibonosiries(int x) {}
	
	public static  void  isPalindrome(int x) {}
	
	public static  void  isNivenhsarshad(int x) {
		   int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
		
	}
	
	public static  void  isSpySpecial(int x) {
		
		 int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isDuck(int x) {
		
		 int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isNeon(int x) {
		
		 int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isAutomorphic(int x) {
		
		 int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isKrishnaMoorthy(int x) {
		
		 int m=x;
		   while(x!=0) {
			   int d = x%10;
			   // logic //
			   x=x/10;
		   }
		   if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isPrimeOrComposite(int x) {
		
		for (int i = 1; i<=x;i++) {
			 if (x%i==0) {
				// logic //
			}
		}if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isAbunduatOrDeficient(int x) {
		
		for (int i = 1; i<=x;i++) {
			 if (x%i==0) {
				// logic //
			}
		}if (true) {
			System.out.println();
		}else
			System.out.println();
	}
	
	public static  void  isPerfect(int x) {
		
		for (int i = 1; i<=x;i++) {
			 if (x%i==0) {
				// logic //
			}
		}if (true) {
			System.out.println();
		}else
			System.out.println();
	}
}

     
		// TODO Auto-generated method stub
       
             
       
       
  	



    
    
